import {
    Box,
    Image,
    Img,
    Skeleton,
    SkeletonText,
    Text,
    VStack,
    Wrap,
} from '@chakra-ui/react';
import { ActionFunction, json, MetaFunction, redirect } from '@remix-run/node';
import { useLoaderData, useTransition } from '@remix-run/react';
import { Configuration, OpenAIApi } from 'openai';
import { useEffect, useState } from 'react';
import type { LoaderFunction } from 'react-router';
import { OpenAIForm } from '~/components/forms/open-ai/open-ai';
import { StyledHeading } from '~/components/styled-heading/styled-heading';
import placeholderImg from '../assets/images/placeholder.png';
export type LoaderData = {
    prompt: string | null;
    image?: string;
};

export const loader: LoaderFunction = async ({ request }) => {
    const url = new URL(request.url);
    const prompt = url.searchParams.get('prompt');
    if (!prompt)
        return json<LoaderData>({
            prompt: prompt,
            image: '',
        });

    const configuration = new Configuration({
        apiKey: process.env.OPENAI_API_KEY,
    });
    const openai = new OpenAIApi(configuration);
    let response;

    try {
        response = await openai.createImage({
            prompt: prompt,
            n: 1,
            size: '512x512',
        });
    } catch (error: any) {
        if (error.response) {
            console.log(error.response.status);
            console.log(error.response.data);
        } else {
            console.log(error.message);
        }
    }
    return json<LoaderData>({
        prompt: prompt,
        image: response ? response.data.data[0].url : '',
    });
};

export const action: ActionFunction = async ({ request }) => {
    const formData = await request.formData();
    const prompt = formData.get('prompt');

    const formErrors = {
        prompt: prompt ? null : 'Prompt is required',
    };

    const hasFormErrors = Object.values(formErrors).some(
        (errorMessage) => errorMessage
    );

    if (hasFormErrors) {
        return json({ error: 'Form was not filled out correctly' });
    }

    return redirect(`/image-generation?prompt=${prompt}`);
};

export const meta: MetaFunction = () => ({
    charset: 'utf-8',
    title: 'Image Generation with OpenAI | Luke Davies Dev',
    description: 'OpenAI image generation on lukedavies.dev',
    viewport: 'width=device-width,initial-scale=1',
});

export default function ImageGenerationRoute() {
    const { image, prompt } = useLoaderData() as LoaderData;
    const transition = useTransition();
    const [imageResults, setImageResults] = useState<
        { prompt: string; image: string }[]
    >([]);
    const [selectedImage, setSelectedImage] = useState<{
        image: string;
        prompt: string;
    }>();

    useEffect(() => {
        const storedImageResults =
            window.sessionStorage.getItem('image-results');

        if (storedImageResults) {
            const parsedStoredResults = JSON.parse(storedImageResults);
            const imageSet = new Set(parsedStoredResults);
            if (image) {
                imageSet.add({
                    prompt,
                    image,
                });
            }

            const imageArr = Array.from(imageSet);
            sessionStorage.setItem('image-results', JSON.stringify(imageArr));
            //@ts-ignore
            setImageResults(imageArr);
        } else {
            if (image) {
                window.sessionStorage.setItem(
                    'image-results',
                    JSON.stringify([
                        {
                            prompt,
                            image,
                        },
                    ])
                );
            }
        }
    }, [image, prompt]);

    return (
        <main>
            <Box minH={'calc(100vh - 230px)'}>
                <Box mb={2} mt={4}>
                    <StyledHeading
                        type="h1"
                        size="xl"
                        color="dark"
                        content="Open AI Image Generation"
                    />
                </Box>
                <Text
                    fontSize={'sm'}
                    color="gray.600"
                    maxW={['100%', '100%', '90%']}
                >
                    Type in a prompt and get a 512x512 image generated by
                    OpenAI, because why not.
                </Text>

                <OpenAIForm setImageResults={setImageResults} />

                {imageResults.length > 1 && (
                    <Box mt={4}>
                        <Wrap spacing={4} justify={'start'}>
                            {imageResults.slice(0, -1).map((res, i) => {
                                return (
                                    <VStack
                                        maxW={['50px', '75px', '150px']}
                                        key={`${res.prompt}-${i}`}
                                        onClick={() => {
                                            setSelectedImage({
                                                image: res.image,
                                                prompt: res.prompt,
                                            });
                                        }}
                                    >
                                        <Image
                                            src={res.image}
                                            alt="search-history"
                                            height={'auto'}
                                            shadow={'md'}
                                            borderRadius={8}
                                            fallbackSrc={placeholderImg}
                                        />
                                    </VStack>
                                );
                            })}
                        </Wrap>
                    </Box>
                )}

                {transition.state === 'submitting' ||
                transition.state === 'loading' ? (
                    <VStack
                        mt={8}
                        display={'flex'}
                        justifyContent={'center'}
                        flexDir={'column'}
                        alignItems={'center'}
                        spacing={4}
                    >
                        <SkeletonText
                            opacity={'0.5'}
                            fadeDuration={1}
                            height={'20px'}
                        />
                        <Skeleton
                            width={'516px'}
                            height={'516px'}
                            margin={'0 auto'}
                            borderRadius={8}
                        />
                    </VStack>
                ) : (
                    image && (
                        <Box
                            mt={8}
                            display={'flex'}
                            justifyContent={'center'}
                            flexDir={'column'}
                            alignItems={'center'}
                        >
                            <Text
                                fontSize={'sm'}
                                color="gray.600"
                                maxW={['100%', '100%', '90%']}
                                fontStyle="italic"
                                mb={2}
                            >
                                {selectedImage ? selectedImage.prompt : prompt}
                            </Text>
                            <Img
                                src={
                                    selectedImage ? selectedImage.image : image
                                }
                                alt="image-generation-result"
                                width={['auto', 'auto', '516px']}
                                height={['auto', 'auto', '516px']}
                                margin={'0 auto'}
                                shadow={'md'}
                                borderRadius={8}
                            />
                        </Box>
                    )
                )}
            </Box>
        </main>
    );
}
